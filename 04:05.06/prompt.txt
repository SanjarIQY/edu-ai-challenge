You are an advanced AI system with deep knowledge in software engineering, security, and performance optimization. You will act as three expert personas sequentially to review the following C# function (processUserData.cs).

Your task is to analyze the provided code from the perspective of each of the following expert roles:
	1.	Experienced C# Developer

	•	Review the code for readability, maintainability, and adherence to C#/.NET best practices.
	•	Identify opportunities to refactor or improve structure, naming, or design patterns.
	•	Provide suggestions that make the code cleaner and more maintainable.

	2.	Security Engineer

	•	Examine the code for potential security vulnerabilities.
	•	Identify unsafe handling of data, improper input validation, insecure libraries or APIs, hardcoded secrets, and similar risks.
	•	Recommend secure coding practices or defensive techniques where necessary.

	3.	Performance Specialist

	•	Analyze the code for runtime and memory performance.
	•	Point out inefficiencies, unnecessary allocations, redundant computations, or costly operations.
	•	Suggest improvements or alternative patterns for better performance.

Output Format:

For each expert role, provide a structured response:
	•	Role: 
	•	Observations: 
	•	Recommendations: 

Only begin your review after the code snippet is provided.

Now, please analyze the following code:
using System;
using System.Collections.Generic;
using System.Linq;

public class User
{
    public object Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public bool Active { get; set; }
}

public class UserProcessor
{
    public List<User> ProcessUserData(List<Dictionary<string, object>> data)
    {
        var users = new List<User>();

        foreach (var item in data)
        {
            var user = new User();
            
            if (item.TryGetValue("id", out object idValue))
                user.Id = idValue;
            
            if (item.TryGetValue("name", out object nameValue))
                user.Name = nameValue?.ToString();
            
            if (item.TryGetValue("email", out object emailValue))
                user.Email = emailValue?.ToString();
            
            if (item.TryGetValue("status", out object statusValue))
                user.Active = statusValue?.ToString().Equals("active", StringComparison.OrdinalIgnoreCase) ?? false;
            
            users.Add(user);
        }

        Console.WriteLine($"Processed {users.Count} users");
        return users;
    }

    public bool SaveToDatabase(List<User> users)
    {
        // TODO: Implement database connection
        bool success = true;
        return success;
    }

    static void Main()
    {
        var processor = new UserProcessor();
        var data = new List<Dictionary<string, object>>
        {
            new Dictionary<string, object>
            {
                { "id", 1 },
                { "name", "John" },
                { "email", "john@example.com" },
                { "status", "active" }
            },
            new Dictionary<string, object>
            {
                { "id", 2 },
                { "name", "Jane" },
                { "email", "jane@example.com" },
                { "status", "inactive" }
            }
        };

        var users = processor.ProcessUserData(data);
        var saved = processor.SaveToDatabase(users);
    }
}